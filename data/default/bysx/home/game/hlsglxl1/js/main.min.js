var CheckViewer = function(t) {
		function e(e, s, i, n) {
			void 0 === n && (n = 0), t.call(this), this.blockMaps = [], this.blockInitIdList = [], this.blockList = [], this.first = null, this.blockViewer = new egret.Sprite, this.SceneBlockNums = 0, this.blockTypeList = {}, this.updateScoreCallback = null, this.linkTimer = new egret.Timer(1e3), this.randomShowTimer = new egret.Timer(2500), this.randomposTimerNums = 4e3, this.linkNums = 0, this.bgStyle = {
				classic: ["checkBackground", "#239520"],
				lightning: ["checkBackground_blue", "#006fbf"],
				dark_clouds: ["checkBackground_dark_clouds", "#4f2d8e"]
			}, this.mode = i, this.level = n, this.background = new egret.Bitmap(RES.getRes(this.bgStyle.hasOwnProperty(i) ? this.bgStyle[i][0] : this.bgStyle[games.MODE.CLASSIC][0])), document.body.style.backgroundColor = this.bgStyle.hasOwnProperty(i) ? this.bgStyle[i][1] : this.bgStyle[games.MODE.CLASSIC][1], this.maps = e.data, this.range = s, this.width = games.w, this.height = games.boxScale * games.boxNums.j, this.addChild(this.background), this.linkViewer = new LinkViewer, this.addChild(this.blockViewer), this.addChild(this.linkViewer), this.y = games.pos.checkviewer.y, this.mapInit(), this.linkTimer.addEventListener(egret.TimerEvent.TIMER, this.onLinkTimer, this), this.linkTimer.start(), this.mode == games.MODE.DRAK_CLOUDS && (this.randomShowTimer.addEventListener(egret.TimerEvent.TIMER, this.onRandomTimer, this), this.randomShowTimer.start()), this.mode == games.MODE.RANDOM && (this.randomPosTimer = new egret.Timer(Math.max(500, this.randomposTimerNums - 300 * this.level)), this.randomPosTimer.addEventListener(egret.TimerEvent.TIMER, this.onRandomPosTimer, this), this.randomPosTimer.start())
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.destory = function() {
			this.linkTimer.stop(), this.linkTimer.removeEventListener(egret.TimerEvent.TIMER, this.onLinkTimer, this), this.mode == games.MODE.DRAK_CLOUDS && (this.randomShowTimer.removeEventListener(egret.TimerEvent.TIMER, this.onRandomTimer, this), this.randomShowTimer.stop()), this.mode == games.MODE.RANDOM && (this.randomPosTimer.removeEventListener(egret.TimerEvent.TIMER, this.onRandomPosTimer, this), this.randomPosTimer.stop())
		}, i.stop = function() {
			this.linkTimer.stop(), this.mode == games.MODE.DRAK_CLOUDS && this.randomShowTimer.stop(), this.mode == games.MODE.RANDOM && this.randomPosTimer.stop()
		}, i.next = function() {
			this.linkTimer.start(), this.mode == games.MODE.DRAK_CLOUDS && this.randomShowTimer.start(), this.mode == games.MODE.RANDOM && this.randomPosTimer.start()
		}, i.onRandomPosTimer = function(t) {
			for (var e = Math.max(Math.floor(6 * Math.random()) + 4, this.blockList.length), s = 0; e > s; s++) {
				var i = this.blockList[Math.floor(Math.random() * this.blockList.length)],
					n = this.blockList[Math.floor(Math.random() * this.blockList.length)];
				if (i != n) {
					var o = i.id;
					i.setTexture(n.id), n.setTexture(o)
				}
			}
		}, i.mapInit = function() {
			for (var t, e, s = this.range, i = 0, n = 0; n < games.boxNums.i; n++) {
				this.blockMaps[n] = [];
				for (var o = 0; o < games.boxNums.j; o++) 1 != this.maps[n][o] ? (0 == this.maps[n][o] ? (e = s[i], this.SceneBlockNums++) : e = this.maps[n][o] + 14, t = new ElementBlock(e, {
					i: n,
					j: o
				}, this.mode == games.MODE.DRAK_CLOUDS), this.blockMaps[n][o] = t, t.touchEnabled && (this.blockList.push(t), this.blockInitIdList.push(i), this.SceneBlockNums++), i++, i >= s.length && (i = 0), this.blockViewer.addChild(t), t.addEventListener(ElementBlock.SELECT, this.blockSelect, this)) : this.blockMaps[n][o] = null
			}
			this.randomElement()
		}, i.showTips = function() {
			var t = this.getTips();
			if (console.log(t), t.length > 0) {
				for (var e = 0; e < t.length; e++) t[e].showTipsEffect();
				this.TipList = t
			} else console.log("games Over")
		}, i.blockSelect = function(t) {
			if (null == this.first || t.currentTarget == this.first || this.first.id != t.currentTarget.id) this.setFirst(t.currentTarget);
			else {
				var e = LinkLink.to(this.first.index, t.currentTarget.index, this.blockMaps);
				if (e) {
					SoundController.playCheckSound();
					var s = 2;
					if (this.linkNums > 0) {
						s = 2 * this.linkNums;
						var i = new comboViewer(this.linkNums, {
							x: t.currentTarget.x,
							y: t.currentTarget.y
						});
						this.addChild(i)
					}
					this.linkNums++, this.linkTimer.stop(), this.linkTimer.start(), games.score += s, this.updateScoreCallback && this.updateScoreCallback(), this.removeElement([this.first, t.currentTarget]), this.linkViewer.drawLine(e), this.first = null;
					var n = this.getTips();
					if (0 == n.length) if (this.blockList.length > 0) for (var o = this, r = 0; r < this.blockList.length; r++) r == this.blockList.length - 1 ? this.blockList[r].splicesAnimation(function() {
						o.dispatchEvent(new egret.Event("CHECK_END", !1, !1))
					}) : this.blockList[r].splicesAnimation(null);
					else this.dispatchEvent(new egret.Event("CHECK_END", !1, !1))
				} else this.setFirst(t.currentTarget)
			}
		}, i.getTips = function() {
			for (var t in this.blockTypeList) if (0 == this.blockTypeList[t].length) delete this.blockTypeList[t];
			else if (this.blockTypeList[t].length >= 2) for (var e = this.blockTypeList[t], s = 0; s < e.length; s++) if (e[s].touchEnabled) {
				var i = this.checkArrLink(e[s], e);
				if (i.length > 0) return i
			}
			return []
		}, i.checkArrLink = function(t, e) {
			for (var s = 0; s < e.length; s++) if (e[s] != t && e[s].id == t.id && e[s].touchEnabled && LinkLink.to(t.index, e[s].index, this.blockMaps)) return [t, e[s]];
			return []
		}, i.randomElement = function() {
			for (var t = 0; t < this.blockInitIdList.length; t++) {
				var e = Math.floor(Math.random() * this.blockInitIdList.length),
					s = this.blockInitIdList[e];
				this.blockInitIdList[e] = this.blockInitIdList[t], this.blockInitIdList[t] = s, this.blockList[t].setTexture(this.blockInitIdList[t]), this.blockList[e].setTexture(this.blockInitIdList[e]), this.blockTypeList.hasOwnProperty(this.blockInitIdList[t]) ? this.blockTypeList[this.blockInitIdList[t]].push(this.blockList[t]) : this.blockTypeList[this.blockInitIdList[t]] = [this.blockList[t]], this.blockTypeList.hasOwnProperty(this.blockInitIdList[e]) ? this.blockTypeList[this.blockInitIdList[e]].push(this.blockList[e]) : this.blockTypeList[this.blockInitIdList[e]] = [this.blockList[e]]
			}
			this.blockInitIdList = []
		}, i.setFirst = function(t) {
			null != this.first && this.setSelectAnimation(this.first, !1), SoundController.playSelect(), this.first = t, this.setSelectAnimation(t, !0)
		}, i.onLinkTimer = function(t) {
			this.linkNums = 0, console.log("reset link")
		}, i.onRandomTimer = function(t) {
			for (var e = (Math.max(this.blockList.length, Math.floor(4 * Math.random()) + 4), 0); e < this.blockList.length; e++) this.blockList[Math.floor(Math.random() * this.blockList.length)].cloudAnimation()
		}, i.setSelectAnimation = function(t, e) {
			e ? t.setSelectEffect() : t.unSelectEffect()
		}, i.removeElement = function(t) {
			for (var e = 0; e < t.length; e++) {
				var s = this.blockList.indexOf(t[e]);
				s > -1 && this.blockList.splice(s, 1);
				var i = this.blockTypeList[t[e].id].indexOf(t[e]);
				i > -1 && this.blockTypeList[t[e].id].splice(i, 1), t[e].removeEventListener(ElementBlock.SELECT, this.blockSelect, this), t[e].removeAnimation(), this.blockMaps[t[e].index.i][t[e].index.j] = null, this.SceneBlockNums--
			}
		}, e
	}(egret.Sprite);
egret.registerClass(CheckViewer, "CheckViewer");
var Config = function() {
		function t() {}
		var e = (__define, t);
		e.prototype;
		return t
	}();
egret.registerClass(Config, "Config");
var LinkViewer = function(t) {
		function e() {
			t.call(this)
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.drawLine = function(t) {
			for (var e = 0; e < t.length - 1; e++) this.addChild(new linkStyle(t[e], t[e + 1]))
		}, e
	}(egret.Sprite);
egret.registerClass(LinkViewer, "LinkViewer");
var linkStyle = function(t) {
		function e(e, s) {
			t.call(this);
			var i, n;
			this.star0 = new egret.Bitmap(RES.getRes("star")), this.star1 = new egret.Bitmap(RES.getRes("star")), this.star0.anchorOffsetX = this.star0.anchorOffsetY = this.star1.anchorOffsetX = this.star1.anchorOffsetY = this.star0.width / 2, this.line = new egret.Bitmap(RES.getRes("line")), i = {
				x: e.i * games.boxScale + games.boxScale / 2,
				y: e.j * games.boxScale + games.boxScale / 2
			}, n = {
				x: s.i * games.boxScale + games.boxScale / 2,
				y: s.j * games.boxScale + games.boxScale / 2
			}, this.line.anchorOffsetX = this.line.width / 2, this.addChild(this.line), i.x != n.x ? (this.line.rotation = -90, this.line.height = Math.max(i.x, n.x) - Math.min(i.x, n.x), this.line.x = Math.min(i.x, n.x), this.line.y = i.y) : (this.line.height = Math.max(i.y, n.y) - Math.min(i.y, n.y), this.line.y = Math.min(i.y, n.y), this.line.x = i.x), this.addChild(this.star0), this.addChild(this.star1), this.star0.x = i.x, this.star0.y = i.y, this.star1.x = n.x, this.star1.y = n.y;
			var o = this;
			egret.Tween.get(this.star0, {
				loop: !0
			}).to({
				rotation: 360
			}, 600), egret.Tween.get(this.star1, {
				loop: !0
			}).to({
				rotation: 360
			}, 600), egret.Tween.get(this.line).wait(150).to({
				alpha: 0
			}, 100).call(function() {
				egret.Tween.removeTweens(o.star0), egret.Tween.removeTweens(o.star1), egret.Tween.removeTweens(o), o.parent.removeChild(o)
			})
		}
		__extends(e, t);
		var s = (__define, e);
		s.prototype;
		return e
	}(egret.Sprite);
egret.registerClass(linkStyle, "linkStyle");
var Scene = function(t) {
		function e(e) {
			t.call(this), this.level = 0, this.times = {
				classic: 180,
				lightning: 30,
				dark_clouds: 80,
				random: 90
			}, games.status = games.GAME_STATUS.PLAY, SoundController.playBackGoundSound(), console.log(e), games.score = 0, this.mode = e, this.width = games.w, this.height = games.h, games.stage.addChild(this), this.start()
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.start = function() {
			var t = this;
			games.times = this.times[this.mode];
			var e = this.getConfig();
			this.topBanner = new PlayTopBanner(this.mode), this.checkViewer = new CheckViewer(e.data, e.range, this.mode), this.checkViewer.updateScoreCallback = this.topBanner.setScore.bind(this.topBanner), this.addChild(this.checkViewer), this.checkViewer.x = -games.w, egret.Tween.get(this.checkViewer).to({
				x: 0
			}, 300).call(function() {
				t.topBanner.startTimes()
			}), this.addChild(this.topBanner), this.stopView = new stopViewer, this.topBanner.addEventListener("gameStop", this.gameStop, this), this.topBanner.addEventListener("TIME_OUT", this.GameOver, this), this.checkViewer.addEventListener("CHECK_END", this.CheckEnd, this), this.stopView.addEventListener("gameNext", this.next, this), this.stopView.addEventListener("backButton", this.back, this)
		}, i.next = function(t) {
			this.topBanner.startTimes(), this.checkViewer.next(), this.removeChild(this.stopView)
		}, i.back = function(t) {
			var e = this;
			Main.Viewers.alpha = 1, this.checkViewer.stop(), this.topBanner.removeEventListener("TIME_OUT", this.GameOver, this), this.topBanner.stopTimes(), egret.Tween.get(this).to({
				x: -games.w
			}, 150).call(function() {
				games.stage.removeChild(e), e.dispatchEvent(new egret.Event("backs", !1, !1))
			})
		}, i.gameStop = function(t) {
			this.stopView.init(), this.addChild(this.stopView)
		}, i.getConfig = function() {
			var t = {};
			switch (this.mode) {
			case games.MODE.CLASSIC:
				t.data = games.getClassicConfig(), t.time = -1, t.range = games.getIdRange(8);
				break;
			case games.MODE.LIGHTNING:
				console.log("get lightning!"), t.time = Math.max(this.times[this.mode] - 2 * this.level, 8), t.isAddTimes = !1, t.data = games.getLightningConfig(), t.range = games.getIdRange(Math.floor(3 * Math.random()) + 3);
				break;
			case games.MODE.DRAK_CLOUDS:
				t.data = games.getOtherConfig(), t.time = Math.max(this.times[this.mode] - 5 * this.level, 15), t.isAddTimes = !1, t.range = games.getIdRange(Math.min(3 + Math.floor(this.level / 2), 8));
				break;
			case games.MODE.RANDOM:
				t.time = 20, t.isAddTimes = !0, t.data = games.getOtherConfig(), t.range = games.getIdRange(Math.floor(4 * Math.random()) + 4)
			}
			return t
		}, i.GameOver = function(t) {
			console.log("time out"), SoundController.playOverSound(), this.checkViewer.stop(), this.topBanner.removeEventListener("TIME_OUT", this.GameOver, this);
			var e = games.getBestScore(this.mode);
			games.score > e && (e = games.score, games.setScore(this.mode, e));
			var s = this,
				i = new GameOverViewer(games.score, e, this.mode, function(t) {
					egret.Tween.get(this).to({
						x: -games.w
					}, 150).call(function() {
						games.stage.removeChild(s), s.dispatchEvent(new egret.Event(0 == t ? "backs" : "rstart", !1, !1))
					})
				}.bind(this));
			this.addChild(i), i.x = games.w, egret.Tween.get(i).to({
				x: 0
			})
		}, i.CheckEnd = function(t) {
			console.log("check end,level update!");
			var e = this;
			this.level++;
			var s = this.getConfig();
			this.checkViewer.removeEventListener("CHECK_END", this.CheckEnd, this), this.topBanner.stopTimes();
			var i = new CheckViewer(s.data, s.range, this.mode);
			i.updateScoreCallback = this.topBanner.setScore.bind(this.topBanner), this.addChild(i), i.x = -games.w, egret.Tween.get(this.checkViewer).wait(600).to({
				x: games.w
			}, 300), egret.Tween.get(i).wait(600).to({
				x: 0
			}, 300).call(function() {
				egret.Tween.removeTweens(e.checkViewer), egret.Tween.removeTweens(i), e.removeChild(e.checkViewer), e.checkViewer = i, s.time > 0 && e.topBanner.setTimes(s.time, s.isAddTimes), e.topBanner.startTimes()
			}), i.addEventListener("CHECK_END", this.CheckEnd, this), this.addChildAt(this.topBanner, this.numChildren - 1)
		}, e
	}(egret.Sprite);
egret.registerClass(Scene, "Scene");
var SoundController = function() {
		function t() {}
		var e = (__define, t);
		e.prototype;
		return t.initbgSound = function() {
			this.bgSound = RES.getRes("bgm"), this.playSound = RES.getRes("playsound"), this.overSound = RES.getRes("gameOverSound"), this.selectSound = RES.getRes("selectSound"), this.checkSound = RES.getRes("checkSound")
		}, t.playBackGoundSound = function() {
			this.isOpen && (this.stopBackGroundSound(), games.status == games.GAME_STATUS.INIT ? this.currentBgChange = this.bgSound.play(0, 99999) : games.status == games.GAME_STATUS.PLAY && (this.currentBgChange = this.playSound.play(0, 99999)))
		}, t.stopBackGroundSound = function() {
			t.currentBgChange && (this.currentBgChange.stop(), this.currentBgChange = null)
		}, t.playSelect = function() {
			t.isOpen && this.selectSound.play(0, 1)
		}, t.playCheckSound = function() {
			t.isOpen && this.checkSound.play(0, 1)
		}, t.playOverSound = function() {
			this.isOpen && this.overSound.play(0, 1)
		}, t.isOpen = !0, t
	}();
egret.registerClass(SoundController, "SoundController");
var games = function() {
		function t() {}
		var e = (__define, t);
		e.prototype;
		return t.getMapConfig = function(e) {
			return 0 > e && (e = Math.floor(Math.random() * t.maps_nums)), RES.getRes("maps_" + e.toString())
		}, t.getClassicConfig = function() {
			return RES.getRes("classic")
		}, t.getLightningConfig = function() {
			var t = Math.floor(14 * Math.random());
			return RES.getRes("lightning_" + t.toString())
		}, t.getOtherConfig = function() {
			return RES.getRes("other_" + Math.floor(10 * Math.random()).toString())
		}, t.getIdRange = function(t) {
			for (var e = [], s = 0; t > s; s++) e.push(Math.floor(8 * Math.random()));
			return e
		}, t.getBestScore = function(e) {
			return localStorage.getItem(t.appid + e) ? Number(localStorage.getItem(t.appid + e)) : 0
		}, t.setScore = function(e, s) {
			localStorage.setItem(t.appid + e, s.toString())
		}, t.boxScale = 80, t.boxNums = {
			i: 8,
			j: 12
		}, t.status = "init", t.GAME_STATUS = {
			INIT: "init",
			PLAY: "play",
			END: "over"
		}, t.appid = "ASA90WQ(!JFSSX_)04!!@@IKO0#####", t.MODE = {
			CLASSIC: "classic",
			LIGHTNING: "lightning",
			DRAK_CLOUDS: "dark_clouds",
			RANDOM: "random"
		}, t.score = 0, t.times = 30, t.maps_nums = 1, t.level = 0, t.idRange = {
			min: 5,
			max: 15
		}, t.pos = {
			topbar: {
				x: 0,
				y: 0
			},
			checkviewer: {
				x: 0,
				y: 100
			},
			bottomviewer: {
				x: 0,
				y: 980
			}
		}, t
	}();
egret.registerClass(games, "games");
var Main = function(t) {
		function e() {
			t.call(this), this.shp = new egret.Shape, sdk.init(), this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this)
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.onAddToStage = function(t) {
			games.stage = this.stage, games.w = this.stage.stageWidth, games.h = this.stage.stageHeight, games.canvas = document.getElementsByTagName("canvas")[0], RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), RES.loadConfig("resource/default.res.json", "resource/"), this.shp.graphics.beginFill(16761091, 1), this.shp.graphics.drawRect(0, 0, games.w, 10), this.shp.graphics.endFill(), this.stage.addChild(this.shp), this.shp.y = (games.h - 10) / 2, this.shp.x = -games.w
		}, i.onConfigComplete = function(t) {
			RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this), RES.loadGroup("preload")
		}, i.onResourceLoadComplete = function(t) {
			"preload" == t.groupName && (RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this), SoundController.initbgSound(), this.stage.removeChild(this.shp), this.stage.addChild(e.Viewers = new GameStartViewer))
		}, i.onItemLoadError = function(t) {
			console.warn("Url:" + t.resItem.url + " has failed to load")
		}, i.onResourceLoadError = function(t) {
			console.warn("Group:" + t.groupName + " has failed to load"), this.onResourceLoadComplete(t)
		}, i.onResourceProgress = function(t) {
			if ("preload" == t.groupName) {
				var e = Number(t.itemsLoaded) / Number(t.itemsTotal);
				this.shp.x = -(games.w - games.w * e), sdk.setProgress(Math.floor(100 * e)), console.log()
			}
		}, e
	}(egret.DisplayObjectContainer);
egret.registerClass(Main, "Main");
var Button = function(t) {
		function e(e) {
			t.call(this, e), this.isTween = !1, this.touchEnabled = !0, this.anchorOffsetX = this.width / 2, this.anchorOffsetY = this.height / 2, this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onStartToucher, this)
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.onStartToucher = function(t) {
			if (!this.isTween && !e.isRun) {
				var s = this;
				e.isRun = !0, this.isTween = !0, egret.Tween.get(this).to({
					scaleX: .6,
					scaleY: .6
				}, 60).to({
					scaleX: 1,
					scaleY: 1
				}, 60).call(function() {
					s.isTween = !1, e.isRun = !1, s.dispatchEvent(new egret.Event(e.CLICK, !1, !1))
				})
			}
		}, e.CLICK = "click", e.isRun = !1, e
	}(egret.Bitmap);
egret.registerClass(Button, "Button");
var ElementBlock = function(t) {
		function e(e, s, i) {
			void 0 === i && (i = !1), t.call(this), this.display = new egret.Bitmap, this.tipsshp = new egret.Shape, this.select = new egret.Bitmap(RES.getRes("select")), this.select.visible = !1, this.addChild(this.display), this.display.width = this.display.height = games.boxScale, this.index = s, this.setTexture(e), this.anchorOffsetX = this.width / 2, this.anchorOffsetY = this.height / 2, this.x = s.i * games.boxScale + this.width / 2, this.y = s.j * games.boxScale + this.height / 2, i && (this.cloud = new egret.Bitmap(RES.getRes("cloudicon")), this.addChild(this.cloud)), this.tipsshp.graphics.lineStyle(10, 16777215, 1), this.tipsshp.graphics.drawRect(5, 5, games.boxScale - 10, games.boxScale - 10), this.tipsshp.graphics.endFill(), this.addChild(this.tipsshp), this.tipsshp.visible = !1, this.addChild(this.select), this.select.width = this.display.width, this.select.height = this.display.height, this.select.y = -2
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.cloudAnimation = function() {
			1 == this.cloud.alpha && egret.Tween.get(this.cloud).to({
				alpha: 0
			}, 200).wait(600).to({
				alpha: 1
			}, 200)
		}, i.setTexture = function(t) {
			this.touchEnabled = 15 > t, this.id = t;
			var e = "block_" + t.toString();
			this.display.texture = RES.getRes(e), this.name = e, this.touchEnabled && this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onStartTouch, this)
		}, i.onStartTouch = function(t) {
			egret.Tween.removeTweens(this);
			var s = this;
			egret.Tween.get(this).to({
				scaleX: .8,
				scaleY: .8
			}, 100).to({
				scaleX: 1,
				scaleY: 1
			}, 100).call(function() {
				egret.Tween.removeTweens(s)
			}), this.dispatchEvent(new egret.Event(e.SELECT, !1, !1))
		}, i.showTipsEffect = function() {
			this.tipsshp.visible = !0, egret.Tween.get(this.tipsshp, {
				loop: !0
			}).to({
				alpha: 0
			}, 150).to({
				alpha: 1
			}, 150)
		}, i.hideTipsEffect = function() {
			this.tipsshp.visible = !1, this.tipsshp.alpha = 1, egret.Tween.removeTweens(this.tipsshp)
		}, i.setSelectEffect = function() {
			this.select.visible = !0
		}, i.unSelectEffect = function() {
			this.select.visible = !1
		}, i.removeAnimation = function() {
			var t = this;
			this.touchEnabled = !1, egret.Tween.removeTweens(this), egret.Tween.get(this).to({
				scaleX: .1,
				scaleY: .1
			}, 250).call(function() {
				t.parent.removeChild(t)
			})
		}, i.splicesAnimation = function(t) {
			var e = new egret.Bitmap(RES.getRes("splices"));
			this.addChild(e);
			var s = this;
			this.touchEnabled = !1, egret.Tween.removeTweens(this), egret.Tween.get(this).wait(200).to({
				rotation: 260
			}, 200).call(function() {
				egret.Tween.removeTweens(s), t && t(), s.parent.removeChild(s)
			})
		}, e.SELECT = "select", e
	}(egret.Sprite);
egret.registerClass(ElementBlock, "ElementBlock");
var GameOverViewer = function(t) {
		function e(e, s, i, n) {
			t.call(this), games.status = games.GAME_STATUS.END, document.body.style.backgroundColor = "#fffcfd", this.mode = i;
			var o = new egret.Bitmap(RES.getRes("initbg"));
			this.addChild(o);
			var r = new egret.Bitmap(RES.getRes("over"));
			this.addChild(r), r.x = (games.w - r.width) / 2, r.y = 185, this.callback = n;
			var a = new Button(RES.getRes("backhome")),
				h = new Button(RES.getRes("rstart")),
				l = new Button(RES.getRes(SoundController.isOpen ? "sound_open" : "sound"));
			l.addEventListener(Button.CLICK, this.onSoundChange, this), h.addEventListener(Button.CLICK, this.onrstart, this), a.addEventListener(Button.CLICK, this.houstbuttontoucher, this), a.touchEnabled = h.touchEnabled = l.touchEnabled = !0, this.addChild(a), this.addChild(h), this.addChild(l);
			var c = 850;
			a.y = h.y = l.y = c, h.x = games.w / 2, a.x = games.w / 2 - 1.5 * a.width, l.x = games.w / 2 + 1.5 * l.width;
			var d = new egret.BitmapText;
			d.font = RES.getRes("nums_blue"), d.text = e.toString(), this.addChild(d), d.scaleX = d.scaleY = 1.4, d.x = (games.w - d.width * d.scaleX) / 2, d.y = r.y + r.height + 40;
			var g = new egret.Bitmap(RES.getRes("besticon"));
			this.addChild(g);
			var m = new egret.BitmapText;
			m.font = RES.getRes("nums"), m.text = s.toString(), m.scaleX = m.scaleY = 1.4, this.addChild(m), m.x = (games.w - m.width * m.scaleX) / 2 + g.width / 2, m.y = d.y + 110, g.y = m.y + g.height / 2, g.x = m.x - g.width, g.anchorOffsetX = g.width / 2, g.anchorOffsetY = g.height / 2, s == e && egret.Tween.get(g).to({
				scaleX: 1.5,
				scaleY: 1.5
			}, 200).to({
				scaleX: 1,
				scaleY: 1
			}, 200).to({
				scaleX: 1.5,
				scaleY: 1.5
			}, 200).to({
				scaleX: 1,
				scaleY: 1
			}, 200)
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.houstbuttontoucher = function(t) {
			t.currentTarget.touchEnabled = !1, this.callback(0)
		}, i.onSoundChange = function(t) {
			SoundController.isOpen = !SoundController.isOpen, SoundController.isOpen ? SoundController.playBackGoundSound() : SoundController.stopBackGroundSound(), t.currentTarget.texture = RES.getRes(SoundController.isOpen ? "sound_open" : "sound")
		}, i.onrstart = function(t) {
			t.currentTarget.touchEnabled = !1, this.callback(1)
		}, e
	}(egret.Sprite);
egret.registerClass(GameOverViewer, "GameOverViewer");
var GameStartViewer = function(t) {
		function e() {
			t.call(this), this.buttonlist = [], document.body.style.backgroundColor = "#fffcfd", this.addChild(new egret.Bitmap(RES.getRes("initbg")));
			var e = new egret.Bitmap(RES.getRes("logo"));
			this.addChild(e), e.x = 30;
			var s = new Button(RES.getRes("class"));
			this.addChild(s), s.y = 580, s.name = games.MODE.CLASSIC;
			var i = new Button(RES.getRes("sd"));
			this.addChild(i), i.name = games.MODE.LIGHTNING, i.y = s.y + 1.3 * s.height;
			var n = new Button(RES.getRes("cloud"));
			n.name = games.MODE.DRAK_CLOUDS, this.addChild(n), n.y = i.y + 1.3 * i.height;
			var o = new Button(RES.getRes("random"));
			o.name = games.MODE.RANDOM, o.y = n.y + 1.3 * n.height, this.addChild(o);
			var r = new egret.Bitmap(RES.getRes("more"));
			this.addChild(r), r.x = (games.w - r.width) / 2, r.y = o.y + 1.3 * r.height, r.touchEnabled = !0, r.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onMore, this), s.x = i.x = n.x = o.x = games.w / 2, i.addEventListener(Button.CLICK, this.onStart, this), s.addEventListener(Button.CLICK, this.onStart, this), o.addEventListener(Button.CLICK, this.onStart, this), n.addEventListener(Button.CLICK, this.onStart, this), this.buttonlist.push(s), this.buttonlist.push(o), this.buttonlist.push(n), this.buttonlist.push(i), games.status = games.GAME_STATUS.INIT, SoundController.playBackGoundSound()
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.onMore = function(t) {
			sdk.more()
		}, i.setbuttonTouch = function(t) {
			void 0 === t && (t = !0);
			for (var e = 0; e < this.buttonlist.length; e++) this.buttonlist[e].touchEnabled = t
		}, i.onStart = function(t) {
			switch (this.setbuttonTouch(!1), console.log(t.currentTarget.name), t.currentTarget.name) {
			case games.MODE.CLASSIC:
				this.gamescene = new Scene(games.MODE.CLASSIC);
				break;
			case games.MODE.DRAK_CLOUDS:
				this.gamescene = new Scene(games.MODE.DRAK_CLOUDS);
				break;
			case games.MODE.RANDOM:
				this.gamescene = new Scene(games.MODE.RANDOM);
				break;
			case games.MODE.LIGHTNING:
				this.gamescene = new Scene(games.MODE.LIGHTNING)
			}
			egret.Tween.removeTweens(this), egret.Tween.get(this).to({
				alpha: 0
			}, 120), this.gamescene.addEventListener("backs", this.backs, this), this.gamescene.addEventListener("rstart", this.rstart, this)
		}, i.backs = function(t) {
			document.body.style.backgroundColor = "#fffcfd", this.gamescene.removeEventListener("backs", this.backs, this), this.gamescene.removeEventListener("rstart", this.backs, this), egret.Tween.removeTweens(this), egret.Tween.get(this).to({
				alpha: 1
			}, 120), this.gamescene = null, this.setbuttonTouch(!0), games.status = games.GAME_STATUS.INIT, SoundController.playBackGoundSound()
		}, i.rstart = function(t) {
			var e = t.currentTarget.mode;
			this.gamescene.removeEventListener("backs", this.backs, this), this.gamescene.removeEventListener("rstart", this.backs, this), this.gamescene = null, this.onStart({
				currentTarget: {
					name: e
				}
			}), SoundController.playBackGoundSound()
		}, e
	}(egret.Sprite);
egret.registerClass(GameStartViewer, "GameStartViewer");
var LevelViewer = function(t) {
		function e() {
			t.call(this)
		}
		__extends(e, t);
		var s = (__define, e);
		s.prototype;
		return e
	}(egret.Sprite);
egret.registerClass(LevelViewer, "LevelViewer");
var PlayTopBanner = function(t) {
		function e(e) {
			t.call(this), this.fps = 20, this.total = 0, this.scoreText = new egret.BitmapText, this.modeStyle = {
				"default": {
					stopbutton: "stopbutton",
					playtopbanner: "playtopbanner",
					timebarbackground: "timebarbackground",
					timebar: "timebar",
					font: "nums"
				},
				lightning: {
					stopbutton: "stopbutton_blue",
					playtopbanner: "playtopbanner_blue",
					timebarbackground: "timebarbackground_blue",
					timebar: "timebar",
					font: "nums_blue"
				},
				dark_clouds: {
					stopbutton: "stopbutton_blue",
					playtopbanner: "playtopbanner_dark_clouds",
					timebarbackground: "timebarbackground_dark_clouds",
					timebar: "timebar",
					font: "nums_blue"
				}
			}, this.mode = e, this.times = games.times * this.fps, this.total = games.times * this.fps;
			var s = this.modeStyle.hasOwnProperty(this.mode) ? this.modeStyle[this.mode] : this.modeStyle["default"];
			this.timer = new egret.Timer(1e3 / this.fps), this.timer.addEventListener(egret.TimerEvent.TIMER, this.onGameLoopTimer, this), this.stopbutton = new egret.Bitmap(RES.getRes(s.stopbutton));
			var i = new egret.Bitmap(RES.getRes(s.playtopbanner));
			this.addChild(i), this.timeProgress = new Progressbar([s.timebarbackground, s.timebar]), this.addChild(this.timeProgress), this.timeProgress.x = 35, this.timeProgress.y = i.height - 30, this.stopbutton.anchorOffsetX = this.stopbutton.anchorOffsetY = this.stopbutton.width / 2, this.addChild(this.stopbutton), this.stopbutton.x = games.w - 60, this.stopbutton.y = i.height / 2, this.stopbutton.touchEnabled = !0, this.stopbutton.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchStart, this), this.scoreText.font = RES.getRes(s.font), this.addChild(this.scoreText), this.times < 0 && (this.timeProgress.visible = !1), this.scoreText.x = 40, this.scoreText.y = 20, this.setScore()
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.setScore = function() {
			this.scoreText.text = games.score.toString(), egret.Tween.removeTweens(this.scoreText), egret.Tween.get(this.scoreText).to({
				alpha: 0
			}, 150).to({
				alpha: 1
			}, 150)
		}, i.setTimes = function(t, e) {
			void 0 === e && (e = !1), console.log("addtimes,", t, e), e ? (this.times = this.times + t * this.fps, this.times > this.total && (this.total = this.times)) : (this.times = t * this.fps, this.total = this.times), this.setProgress(this.times / this.total)
		}, i.onGameLoopTimer = function(t) {
			this.times--, this.setProgress(this.times / this.total), this.times <= 0 && (this.dispatchEvent(new egret.Event("TIME_OUT", !1, !1)), this.timer.stop(), this.timer.removeEventListener(egret.TimerEvent.TIMER, this.onGameLoopTimer, this))
		}, i.setProgress = function(t) {
			var e = 1 - t;
			this.timeProgress.setProgress(e)
		}, i.startTimes = function() {
			this.timer.start(), console.log("start times")
		}, i.stopTimes = function() {
			this.timer.stop()
		}, i.onTouchStart = function(t) {
			var e = this;
			egret.Tween.get(this.stopbutton).to({
				scaleX: .8,
				scaleY: .8
			}, 100).to({
				scaleX: 1,
				scaleY: 1
			}, 100).call(function() {
				egret.Tween.removeTweens(e.stopbutton), e.stopTimes(), e.dispatchEvent(new egret.Event("gameStop", e, e)), console.log("stop times")
			})
		}, e.STOP = "stop", e
	}(egret.Sprite);
egret.registerClass(PlayTopBanner, "PlayTopBanner");
var Progressbar = function(t) {
		function e(e) {
			t.call(this), this._bg = new egret.Bitmap(RES.getRes(e[0])), this._bar = new egret.Bitmap(RES.getRes(e[1])), this.addChild(this._bg), this.addChild(this._bar), this._barMask = new egret.Rectangle(0, 0, this._bar.width, this._bar.height), this._bar.mask = this._barMask
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.setProgress = function(t) {
			this._barMask = new egret.Rectangle(t * this._bar.width, 0, this._bar.width, this._bar.height), this._bar.mask = this._barMask
		}, e
	}(egret.Sprite);
egret.registerClass(Progressbar, "Progressbar");
var comboViewer = function(t) {
		function e(e, s) {
			t.call(this), this.texlist = ["combo", "good", "cool", "perfect"];
			var i = this.texlist[String(Math.min(this.texlist.length - 1, e - 1))];
			this.texture = RES.getRes(i), console.log(i), this.anchorOffsetX = this.width / 2, this.anchorOffsetY = this.height;
			var n = this;
			this.scaleX = this.scaleY = .2, this.x = s.x, this.y = s.y, egret.Tween.get(this).to({
				scaleX: 1.2,
				scaleY: 1.2
			}, 200).to({
				scaleX: 1,
				scaleY: 1
			}, 200).to({
				y: s.y - 100
			}, 100).call(function() {
				egret.Tween.removeTweens(n), n.parent.removeChild(n)
			})
		}
		__extends(e, t);
		var s = (__define, e);
		s.prototype;
		return e
	}(egret.Bitmap);
egret.registerClass(comboViewer, "comboViewer");
var stopViewer = function(t) {
		function e() {
			t.call(this), this.width = games.w, this.height = games.h;
			var e = new egret.Shape;
			e.graphics.beginFill(0, 1), e.graphics.drawRect(0, 0, this.width, this.height), e.graphics.endFill(), this.addChild(e);
			var s = new egret.Bitmap(RES.getRes("stopview"));
			this.addChild(s), s.x = (games.w - s.width) / 2, s.y = (games.h - s.height) / 2 - 100, this.addChild(s);
			var i = new Button(RES.getRes("startbutton"));
			i.x = s.x + s.width / 2, i.y = s.y + 315, this.addChild(i), i.name = "nextbutton", e.touchEnabled = !0, e.alpha = .5, i.addEventListener(Button.CLICK, this.onNextClick, this);
			var n = new Button(RES.getRes("backhome"));
			n.x = i.x - 1.5 * i.width, n.y = i.y, n.name = "backhome", n.addEventListener(Button.CLICK, this.backButton, this), this.sound = new Button(RES.getRes("sound_open")), this.addChild(this.sound), this.sound.x = i.x + 1.5 * i.width, this.sound.y = n.y, this.addChild(n), this.sound.addEventListener(Button.CLICK, this.soundClick, this)
		}
		__extends(e, t);
		var s = (__define, e),
			i = s.prototype;
		return i.soundClick = function(t) {
			SoundController.isOpen = !SoundController.isOpen, SoundController.isOpen ? SoundController.playBackGoundSound() : SoundController.stopBackGroundSound(), t.currentTarget.texture = RES.getRes(SoundController.isOpen ? "sound_open" : "sound")
		}, i.init = function() {
			SoundController.isOpen ? this.sound.texture = RES.getRes("sound_open") : this.sound.texture = RES.getRes("sound"), this.sound.anchorOffsetX = this.sound.width / 2, this.sound.anchorOffsetY = this.sound.height / 2, this.getChildByName("backhome").touchEnabled = !0, this.getChildByName("nextbutton").touchEnabled = !0
		}, i.onNextClick = function(t) {
			t.currentTarget.touchEnabled = !1, this.dispatchEvent(new egret.Event("gameNext", !1, !1))
		}, i.backButton = function(t) {
			t.currentTarget.touchEnabled = !1, this.dispatchEvent(new egret.Event("backButton", !1, !1))
		}, e
	}(egret.Sprite);
egret.registerClass(stopViewer, "stopViewer");
var sdk = function() {
		function t() {}
		var e = (__define, t);
		e.prototype;
		return t.init = function() {
			h5api.initGame(100046366, "宝可梦连连看", 640, 1136);
			game_login()
		}, t.setProgress = function(t) {
			h5api.progress(t)
		}, t.more = function() {
			window.location.href="http://game.gzacwl.com/"
			//h5api.moreGame()
		}, t
	}();
egret.registerClass(sdk, "sdk");